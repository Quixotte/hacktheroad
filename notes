= Challenge - Why?
Drivers are not achieving maximum efficiency due to lack of knowledge about their optimal speed.

= Solution - How?
With proper communication between driver and VRIs, the flow of traffic would be improved, especially in VRI-heavy areas.
-
Make a smart connected communication device to clearly communicate to other drivers what the optimal flow is.
-
The device itself is rather simple: a light we call the 'banner'.
This banner communicates to drivers behind it with a green color that it is travelling optimally.
Therefore, simply staying behind this car optimizes the flow.
-
With a banner: simply some lights, wired to emit a bright green when that car is near the front of the 'green wave'.
-
This communicates to the driver behind it to tail that vehicle, closing gaps and naturally forming neat 'pelotons' of cars.
-
The light can be either bought by, or handed out to, drivers to be put in the back of their cars, visible for drivers behind them.
-
To be effective, only a small percentage of the people will need to participate.
-
The one simple rule to explain to people is to try to get as close to the head of the green wave as possible (if there is space of course).

= Implementation - What?
-
There are several different components required for the solution.
-
'Time to green' for the next light must be known.
The speed, direction and intended route of the car with the banner.
-

= Closing out
Here's our catchy slogan: Wees geen oen, blijf achter groen!

= Bonus
For drivers who don't want the banner in their car: the 'green wave' data will be made freely available so that google, apple, tomtom, webmobile, etc. can use it in their routing applications.
It will be available in 2 formats: either as time-to-green times of traffic signals and nothing more,
as map-overlayable data, with the speed required along the path, for easy integration for anyone.
-
Drivers using those apps can be psychologically rewarded by informing them of their time and fuel/money saved.
-
Autonomous cars can use the data to prefer riding (at the start of) green waves, automatically causing drivers following them to also be part of those.
-

= Potential issues
When lanes split up right in front of signals, the green wave can only be turned on when both are green, despite drivers sharing a lane beforehand.
Also, in these cases, care must be taken not to drive slower than allowed.





= Actors
== SignalDB
System that records the state of the traffic lights/signals and can deduce patterns.

=== observed( traffic light selector/ID , state = red/orange/green/off/unknown )
Inform the system of the current observed state of a traffic light. Can be sent by the iVRI, smart-cameras, etc.
The selector is explicitly left vague, but can include actual IDs in case they are known, or for example the location, lane, and direction in case the exact IDs are not known.

=== request(route)
Returns the status of traffic lights along a route, which includes their (deduced) schedule.

== TrafficDB
=== observed_traffic(car properties, observed traffic)
=== request_traffic(area) -> traffic description
Answers the given known traffic in an area.


== Smart car
Smart car equipped with an amount of sensors to provide additional info on the current status of the road.

=== Interactions
==== SignalDB::observe
If the smart car can observe signals, passes this information to the SignalDB

==== TrafficDB::observe
If the smart car can observe traffic, passes this information to the TrafficDB

==== Director::optimum_speed
if auto-drive: use this speed instead of the trying the maximum
if not auto-drive: display the optimal speed (in addition to the maximum) to the driver.

=== car_properties() -> car_properties
Properties include
- speed
- position
- direction
- intended path/route
- historic path/route


== CostDB
Given a route (segments traveled at a time with a certain speed) returns the cost of both.
Intended use is to calculate the savings by taking the optimal route.

=== observe(car_properties, route, resources used)
Records the resources used to travel a certain route with the given car properties

=== request(car_properties, route) -> resources used


== Director
Given other system, optimizes flow of traffic.

=== optimum_speed(car_properties, ?intended_route) -> (speed, reason)
Returns the optimal speed on all segments of the route.
==== Examples
	"positie: (52, 7) velocity: (20, 20, 20) -> (42km/u, "green wave")
	"positie: (52, 8) velocity: (20, 20, 20) -> (80km/u, "filepreventie")
	"positie: ...                            -> (route, "most efficient")
==== Uses
SignalDB::request
TrafficDB::request
CostDB::request

=== banner_status(car_properties, ?intended_route) -> (status, reason)
Given the car's properties and the intended route, will return the status the banner should have.
==== Examples
	"... -> (green light, "green wave")
	"... -> (no light, "have to stop about")

Visualisaties

SUMO
VISSIM


